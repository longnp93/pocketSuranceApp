/*app.post('/requestWebsocket', (req, oriRes) => {

    var server = http.createServer(function(request, response) {
        // process HTTP request. Since we're writing just WebSockets
        // server we don't have to implement anything.
    });
    /*server.listen(req.body.port, function() {
        console.log('liste port ' + req.body.port.toString());
    });*/
/*server.listen(1337, function() {
    console.log('liste port 1337');
});
// create the server
var wsServer = new WebSocketServer({
    httpServer: server
});
console.log("create the server")
// WebSocket server
wsServer.on('connection', function(request) {
    console.log('request');
    var connection = request.accept(null, request.origin);

    app.post('/acquireNotification', function(req, res) {
        console.log(JSON.stringify(req.body));
        connection.sendUTF(JSON.stringify(req.body));
        res.send('success');
    });

    // This is the most important callback for us, we'll handle
    // all messages from users here.
    connection.on('message', function(message) {
        console.log(JSON.stringify(message));
        if (message.type === 'utf8') {
            // process WebSocket message
            var utf8Data = JSON.parse(message.utf8Data);
            connection.sendUTF(JSON.stringify(utf8Data));
        }

    });
    server.close();
    connection.on('close', function() {
        // close user connection
        //console.log(JSON.stringify(server.clients));

        server.close();
        console.log('close');
    });
    connection.sendUTF(JSON.stringify({
        'type': 'success',
        'component': 'websocket',
        'msg': 'Websocket is connected'
    }));
});
oriRes.send('success request new webSocket');

});*/
/*
var awsIot = require('aws-iot-device-sdk');
var sFireAlertTopic = "fireAlert";
// Config
var device = awsIot.device({
});

device.on('connect', function() {
    console.log('Connected');
    device.subscribe(sFireAlertTopic);
});
// Receiving a message from any topic that this device is subscribed to.
device.on('message', function(topic, payload) {
    console.log('message', topic, payload.toString());
    if (topic === sFireAlertTopic) {
        console.log("I should activate Buzzer!");
    }
});
// Error
device.on('error', function(error) {
    console.log('Error: ', error);
});*/
/*var optionspost = {
        host: 'ec2-54-185-196-176.us-west-2.compute.amazonaws.com',
        port: '3000',
        path: '/api/users', //'/api/dashboards/db/hi',//'/api/dashboards/home',
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-WEBAUTH-USER': 'admin'
            //'Authorization': 'Bearer eyJrIjoiUGVoYmRvbWRBVnlaSjQ2WndPRGZnbzFRejlOT0ZRMkEiLCJuIjoicG9ja2V0U3VyYW5jZSIsImlkIjoxfQ=='
        }
    };

    var reqPost = http.request(optionspost, function(res) {
        console.log("statusCode: ", res.statusCode);
        console.log("statusMessage: ", res.statusMessage);
        res.on('data', function(chunk) {
            console.log("data: ", chunk.toString('utf8'));
        });
        //context.succeed('Blah');
    });
    reqPost.end();*/
